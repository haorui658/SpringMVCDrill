<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--
        <bean id="propertyConfigurer"
              class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
            <property name="locations">
                <list>
                    <value>/WEB-INF/configs/risk.properties</value>
                </list>
            </property>
        </bean>
    -->
    <!--<mvc:interceptors>-->
    <!--&lt;!&ndash; /*拦截当前路径 例如 /add /** 包括路径及其子路径 例如/add/add &ndash;&gt;-->
    <!--&lt;!&ndash; <mvc:mapping path="/**" /> &ndash;&gt;-->
    <!--&lt;!&ndash;<bean class="com.jd.risktest.Controller.LoginIntercepter"></bean>&ndash;&gt;-->
    <!--<mvc:interceptor>-->
    <!--<mvc:mapping path="/**" />-->
    <!--<bean class="com.jd.risktest.Controller.LoginIntercepter">-->
    <!--<property name="excludedUrls">-->
    <!--<list>-->
    <!--<value>/Login</value>-->
    <!--<value>/doLogin</value>-->
    <!--<value>/static/</value>-->
    <!--<value>/resources/</value>-->
    <!--</list>-->
    <!--</property>-->
    <!--</bean>-->
    <!--</mvc:interceptor>-->
    <!--</mvc:interceptors>-->

    <!-- 本配置文件是工名为mvc-dispatcher的DispatcherServlet使用， 提供其相关的Spring MVC配置 -->

    <!-- 启用Spring基于annotation的DI, 使用户可以在Spring MVC中使用Spring的强大功能。 激活 @Required
        @Autowired,JSR 250's @PostConstruct, @PreDestroy and @Resource 等标注 -->
    <context:annotation-config/>

    <!-- DispatcherServlet上下文， 只管理@Controller类型的bean， 忽略其他型的bean, 如@Service -->
    <context:component-scan base-package="com.jd.risktest">
        <context:include-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"/>
        <context:include-filter type="annotation"
                                expression="org.springframework.stereotype.Service"/>
        <context:include-filter type="annotation"
                                expression="org.springframework.stereotype.Repository"/>
    </context:component-scan>

    <!-- HandlerMapping, 无需配置， Spring MVC可以默认启动。 DefaultAnnotationHandlerMapping
        annotation-driven HandlerMapping -->

    <!-- 扩充了注解驱动，可以将请求参数绑定到控制器参数 -->
    <mvc:annotation-driven/>

    <!-- 静态资源处理， css， js， imgs -->
    <!--<mvc:default-servlet-handler />    &lt;!&ndash; //映射过就找映射过的，没有映射找静态资源 &ndash;&gt;-->
    <mvc:resources mapping="/static/**" location="/resources/"/>

    <!-- 配置ViewResolver。 可以用多个ViewResolver。 使用order属性排序。 InternalResourceViewResolver放在最后。 -->
    <!-- <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="order" value="1" /> <property name="mediaTypes"> <map> <entry
        key="json" value="application/json" /> <entry key="xml" value="application/xml"
        /> <entry key="htm" value="text/html" /> </map> </property> <property name="defaultViews">
        <list> JSON View <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
        </bean> </list> </property> <property name="ignoreAcceptHeader" value="true"
        /> </bean> <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"
        /> <property name="prefix" value="/WEB-INF/jsps/" /> <property name="suffix"
        value=".jsp" /> </bean> -->

    <!-- ===================================================== -->
    <!-- ViewResolver For FreeMarker -->
    <!-- ===================================================== -->
    <bean id="freemarkerResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="order" value="1" />
        <property name="suffix" value=".ftl" />
        <property name="contentType" value="text/html;charset=utf-8" />
        <property name="viewClass">
            <value>org.springframework.web.servlet.view.freemarker.FreeMarkerView</value>
        </property>
    </bean>
    <!-- ===================================================== -->
    <!-- ViewResolver For FreeMarkerConfigurer -->
    <!-- ===================================================== -->
    <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath">
            <value>/WEB-INF/views/</value>
        </property>
        <property name="freemarkerSettings"><!-- 设置FreeMarker环境属性 -->
            <props>
                <prop key="template_update_delay">5</prop><!--刷新模板的周期，单位为秒 -->
                <prop key="default_encoding">UTF-8</prop><!--模板的编码格式 -->
                <prop key="locale">UTF-8</prop><!-- 本地化设置 -->
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
                <prop key="time_format">HH:mm:ss</prop>
                <prop key="number_format">0.####</prop>
                <prop key="boolean_format">true,false</prop>
                <prop key="whitespace_stripping">true</prop>
                <prop key="tag_syntax">auto_detect</prop>
                <prop key="url_escaping_charset">UTF-8</prop>
            </props>
        </property>
    </bean>

    <!--上传文件200*1024*1024即200M resolveLazily属性启用是为了推迟文件解析，以便捕获文件大小异常 <bean id="multipartResolver"
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="209715200" /> <property name="defaultEncoding"
        value="UTF-8" /> <property name="resolveLazily" value="true" /> </bean> -->


</beans>